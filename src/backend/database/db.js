const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = process.env.NODE_ENV === 'production' 
    ? '/tmp/demo_sessions.db'  // Glitch –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /tmp –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    : path.join(__dirname, '../../demo_sessions.db');

console.log('Database path:', dbPath);

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        initializeDatabase();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ–º–æ-—Å–µ—Å—Å–∏–π
    db.run(`
        CREATE TABLE IF NOT EXISTS demo_sessions (
            id TEXT PRIMARY KEY,
            user_data TEXT NOT NULL,
            task_data TEXT NOT NULL,
            user_data_json TEXT NOT NULL,
            expires_at DATETIME NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `, (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã demo_sessions:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ demo_sessions —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
        }
    });

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    db.run(`
        CREATE INDEX IF NOT EXISTS idx_expires_at ON demo_sessions(expires_at)
    `, (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞:', err);
        } else {
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ expires_at —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω');
        }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    cleanupExpiredSessions();
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
function cleanupExpiredSessions() {
    const now = new Date().toISOString();
    
    db.run(`
        DELETE FROM demo_sessions 
        WHERE expires_at < ?
    `, [now], function(err) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', err);
        } else {
            if (this.changes > 0) {
                console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${this.changes} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
            }
        }
    });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupExpiredSessions, 6 * 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.on('error', (err) => {
    console.error('Database error:', err);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    db.close((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        } else {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
        process.exit(0);
    });
});

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
db.run = function(sql, params = []) {
    return new Promise((resolve, reject) => {
        this.constructor.prototype.run.call(this, sql, params, function(err) {
            if (err) reject(err);
            else resolve(this);
        });
    });
};

db.get = function(sql, params = []) {
    return new Promise((resolve, reject) => {
        this.constructor.prototype.get.call(this, sql, params, (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });
};

db.all = function(sql, params = []) {
    return new Promise((resolve, reject) => {
        this.constructor.prototype.all.call(this, sql, params, (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
        });
    });
};

module.exports = db;

