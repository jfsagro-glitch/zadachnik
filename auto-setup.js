#!/usr/bin/env node

/**
 * CURSOR Pipeline Demo - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('\n' + '='.repeat(60));
console.log('üöÄ CURSOR Pipeline Demo - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê');
console.log('='.repeat(60));

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
function checkNodeVersion() {
  return new Promise((resolve) => {
    log('\n1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...', 'blue');
    
    const version = process.version;
    const majorVersion = parseInt(version.slice(1).split('.')[0]);
    
    if (majorVersion >= 18) {
      log(`   ‚úÖ Node.js ${version} - OK`, 'green');
      resolve(true);
    } else {
      log(`   ‚ùå Node.js ${version} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è 18+`, 'red');
      resolve(false);
    }
  });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function installDependencies() {
  return new Promise((resolve) => {
    log('\n2Ô∏è‚É£  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'blue');
    
    const nodeModulesPath = path.join(__dirname, 'node_modules');
    
    if (fs.existsSync(nodeModulesPath)) {
      log('   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
      resolve(true);
      return;
    }
    
    log('   üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º npm –ø–∞–∫–µ—Ç—ã...', 'yellow');
    
    const install = spawn('npm', ['install', '--production'], {
      stdio: 'pipe',
      shell: true
    });
    
    let output = '';
    
    install.stdout.on('data', (data) => {
      output += data.toString();
      process.stdout.write('.');
    });
    
    install.stderr.on('data', (data) => {
      output += data.toString();
    });
    
    install.on('close', (code) => {
      console.log(); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫
      
      if (code === 0) {
        log('   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'green');
        resolve(true);
      } else {
        log(`   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–æ–¥ ${code})`, 'red');
        log('   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: npm install', 'yellow');
        resolve(false);
      }
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function checkFileStructure() {
  return new Promise((resolve) => {
    log('\n3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...', 'blue');
    
    const requiredFiles = [
      'server.js',
      'package.json',
      'public/index.html',
      'public/css/style.css',
      'public/js/app.js',
      'src/backend/routes/demo.js',
      'src/backend/database/db.js'
    ];
    
    let missingFiles = [];
    
    for (const file of requiredFiles) {
      if (fs.existsSync(file)) {
        log(`   ‚úÖ ${file}`, 'green');
      } else {
        log(`   ‚ùå ${file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢`, 'red');
        missingFiles.push(file);
      }
    }
    
    if (missingFiles.length === 0) {
      log('   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ', 'green');
      resolve(true);
    } else {
      log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missingFiles.length} —Ñ–∞–π–ª–æ–≤`, 'red');
      resolve(false);
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
  return new Promise((resolve) => {
    log('\n4Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const dbFiles = ['demo_sessions.db', 'database.db'];
    const existingDb = dbFiles.find(db => fs.existsSync(db));
    
    if (existingDb) {
      log(`   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${existingDb} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'green');
      resolve(true);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log('   üíæ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...', 'yellow');
    
    try {
      const db = require('./src/backend/database/db');
      log('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'green');
      resolve(true);
    } catch (error) {
      log(`   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: ${error.message}`, 'red');
      resolve(false);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  return new Promise((resolve) => {
    log('\n5Ô∏è‚É£  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...', 'blue');
    
    const PORT = process.env.PORT || 3000;
    
    log(`   üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`, 'yellow');
    
    const server = spawn('node', ['server.js'], {
      stdio: 'pipe',
      shell: true,
      env: { ...process.env, NODE_ENV: 'production' }
    });
    
    let serverStarted = false;
    
    server.stdout.on('data', (data) => {
      const output = data.toString();
      console.log(output);
      
      if (output.includes('CURSOR Pipeline Demo –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ') && !serverStarted) {
        serverStarted = true;
        log('\nüéâ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!', 'green');
        log('\nüì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å–∞–º:', 'cyan');
        
        if (process.env.CODESPACE_NAME) {
          const codespaceUrl = `https://${process.env.CODESPACE_NAME}-3000.app.github.dev`;
          log(`   üåê GitHub Codespaces: ${codespaceUrl}`, 'bright');
        }
        
        log(`   üè† –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`, 'bright');
        log(`   üåç –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://0.0.0.0:${PORT}`, 'bright');
        
        log('\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CURSOR Pipeline Demo!', 'magenta');
        log('üéÆ –ù–∞–∂–º–∏—Ç–µ "–î–µ–º–æ-—Ä–µ–∂–∏–º" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'yellow');
        
        resolve(true);
      }
    });
    
    server.stderr.on('data', (data) => {
      console.error(data.toString());
    });
    
    server.on('close', (code) => {
      if (code !== 0) {
        log(`\n‚ùå –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})`, 'red');
        resolve(false);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    process.on('SIGINT', () => {
      log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
      server.kill('SIGINT');
      process.exit(0);
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    setTimeout(() => {
      if (!serverStarted) {
        log('\n‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'yellow');
        log('   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: npm start', 'cyan');
        resolve(false);
      }
    }, 30000);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    const nodeOk = await checkNodeVersion();
    if (!nodeOk) {
      log('\n‚ùå –û–±–Ω–æ–≤–∏—Ç–µ Node.js –¥–æ –≤–µ—Ä—Å–∏–∏ 18 –∏–ª–∏ –≤—ã—à–µ', 'red');
      process.exit(1);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const depsOk = await installDependencies();
    if (!depsOk) {
      log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', 'red');
      process.exit(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    const filesOk = await checkFileStructure();
    if (!filesOk) {
      log('\n‚ùå –ù–µ–ø–æ–ª–Ω–∞—è —Ñ–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞', 'red');
      process.exit(1);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    const dbOk = await initializeDatabase();
    if (!dbOk) {
      log('\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...', 'yellow');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const serverOk = await startServer();
    if (!serverOk) {
      log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', 'red');
      process.exit(1);
    }
    
  } catch (error) {
    log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
