#!/usr/bin/env node

/**
 * CURSOR Pipeline Demo - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */

console.log('üîç CURSOR Pipeline Demo - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
const requiredModules = ['express', 'sqlite3', 'cors', 'helmet', 'compression', 'uuid'];

for (const module of requiredModules) {
  try {
    require(module);
    console.log(`   ‚úÖ ${module}: OK`);
  } catch (error) {
    console.log(`   ‚ùå ${module}: MISSING`);
    console.log(`      –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install ${module}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
console.log('\n2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
const fs = require('fs');
const path = require('path');

const requiredFiles = [
  'server.js',
  'package.json',
  'public/index.html',
  'public/css/style.css',
  'public/js/app.js',
  'public/js/api.js',
  'src/backend/routes/demo.js',
  'src/backend/routes/tasks.js',
  'src/backend/routes/users.js',
  'src/backend/database/db.js',
  'src/backend/database/demo-data.js'
];

let filesOk = 0;
for (const file of requiredFiles) {
  if (fs.existsSync(file)) {
    console.log(`   ‚úÖ ${file}: EXISTS`);
    filesOk++;
  } else {
    console.log(`   ‚ùå ${file}: MISSING`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
console.log('\n3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  console.log(`   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageJson.name}`);
  console.log(`   ‚úÖ –í–µ—Ä—Å–∏—è: ${packageJson.version}`);
  console.log(`   ‚úÖ Node.js: ${packageJson.engines?.node || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
  
  const scripts = Object.keys(packageJson.scripts || {});
  console.log(`   ‚úÖ –°–∫—Ä–∏–ø—Ç—ã: ${scripts.join(', ')}`);
  
  const deps = Object.keys(packageJson.dependencies || {});
  console.log(`   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${deps.length} –ø–∞–∫–µ—Ç–æ–≤`);
  
} catch (error) {
  console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
console.log('\n4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
const PORT = process.env.PORT || 3000;
console.log(`   ‚úÖ –ü–æ—Ä—Ç: ${PORT}`);
console.log(`   ‚úÖ –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'production'}`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Codespaces
if (process.env.CODESPACE_NAME) {
  console.log(`   ‚úÖ Codespaces: ${process.env.CODESPACE_NAME}`);
} else {
  console.log(`   ‚ÑπÔ∏è  Codespaces: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω`);
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\n' + '='.repeat(50));
console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${filesOk}/${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`);

if (filesOk === requiredFiles.length) {
  console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É');
  console.log('\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
  console.log('   npm start');
  console.log('\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
  console.log('   http://localhost:3000');
  
  if (process.env.CODESPACE_NAME) {
    console.log(`   https://${process.env.CODESPACE_NAME}-3000.app.github.dev`);
  }
  
  process.exit(0);
} else {
  console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  process.exit(1);
}
