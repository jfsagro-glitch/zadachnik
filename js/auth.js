/**
 * –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –¥–ª—è –ó–ê–î–ê–ß–ù–ò–ö
 */

class AuthManager {
    constructor() {
        this.currentUser = null;
        this.roles = {
            business: '–ë–∏–∑–Ω–µ—Å',
            manager: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            employee: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            superuser: '–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        
        this.permissions = {
            business: {
                createTask: true,
                viewOwnTasks: true,
                editOwnTasks: true,
                addDocuments: true,
                returnToWork: true,
                changePriority: true,
                changeDeadline: true,
                viewAllTasks: false,
                assignTasks: false,
                approveTask: false,
                viewAnalytics: false
            },
            manager: {
                createTask: true,
                viewOwnTasks: true,
                viewRegionTasks: true,
                editOwnTasks: true,
                assignTasks: true,
                approveTask: true,
                returnTask: true,
                manageEmployees: true,
                viewAnalytics: true,
                splitTask: true,
                changePriority: true,
                changeDeadline: true,
                addComments: true,
                viewAllTasks: false
            },
            employee: {
                createTask: false,
                viewAssignedTasks: true,
                acceptTask: true,
                pauseTask: true,
                sendToRework: true,
                attachFiles: true,
                sendToApproval: true,
                viewOwnTasks: true,
                addComments: true,
                viewAllTasks: false
            },
            superuser: {
                createTask: true,
                viewAllTasks: true,
                viewAllAnalytics: true,
                manageUsers: true,
                manageRegions: true,
                exportData: true,
                viewKPI: true,
                assignTasks: true,
                approveTask: true
            }
        };
        
        this.regions = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'];
        
        this.init();
    }
    
    init() {
        const savedUser = localStorage.getItem('zadachnik_current_user');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
        } else {
            // –î–µ–º–æ-—Ä–µ–∂–∏–º: —Ä–æ–ª—å –ë–∏–∑–Ω–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.setDemoUser('business', '–ú–æ—Å–∫–≤–∞', 'demo.business@company.com');
        }
    }
    
    setDemoUser(role, region = null, email = null) {
        this.currentUser = {
            id: `user_${role}_${Date.now()}`,
            email: email || `demo.${role}@company.com`,
            name: this.getDemoName(role),
            role: role,
            region: region,
            permissions: this.permissions[role]
        };
        this.saveCurrentUser();
    }
    
    getDemoName(role) {
        const names = {
            business: '–ò–≤–∞–Ω –ë–∏–∑–Ω–µ—Å–æ–≤',
            manager: '–ê–Ω–Ω–∞ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            employee: '–ü–µ—Ç—Ä –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
            superuser: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã'
        };
        return names[role] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    
    switchRole(role, region = null) {
        if (!this.roles[role]) {
            console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å:', role);
            return false;
        }
        
        this.setDemoUser(role, region);
        return true;
    }
    
    saveCurrentUser() {
        localStorage.setItem('zadachnik_current_user', JSON.stringify(this.currentUser));
    }
    
    getCurrentUser() {
        return this.currentUser;
    }
    
    getCurrentRole() {
        return this.currentUser ? this.currentUser.role : null;
    }
    
    getCurrentRegion() {
        return this.currentUser ? this.currentUser.region : null;
    }
    
    hasPermission(permission) {
        if (!this.currentUser || !this.currentUser.permissions) {
            return false;
        }
        return this.currentUser.permissions[permission] === true;
    }
    
    canViewTask(task) {
        if (!this.currentUser) return false;
        
        const role = this.currentUser.role;
        const userEmail = this.currentUser.email;
        const userRegion = this.currentUser.region;
        
        // –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ
        if (role === 'superuser') return true;
        
        // –ë–∏–∑–Ω–µ—Å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
        if (role === 'business') {
            return task.businessUser === userEmail;
        }
        
        // –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞—è–≤–∫–∏ —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        if (role === 'manager') {
            return task.region === userRegion;
        }
        
        // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∏–¥–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –µ–º—É –∑–∞–¥–∞—á–∏
        if (role === 'employee') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)
            const employeeEmail = this.currentUser.employeeEmail || userEmail;
            return task.assignedTo && task.assignedTo.includes(employeeEmail);
        }
        
        return false;
    }
    
    canEditTask(task) {
        if (!this.currentUser) return false;
        
        const role = this.currentUser.role;
        const userEmail = this.currentUser.email;
        
        // –ë–∏–∑–Ω–µ—Å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
        if (role === 'business' && task.businessUser === userEmail) {
            return this.hasPermission('editOwnTasks');
        }
        
        // –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        if (role === 'manager' && task.region === this.currentUser.region) {
            return this.hasPermission('editOwnTasks');
        }
        
        // –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ
        if (role === 'superuser') {
            return true;
        }
        
        return false;
    }
    
    getAvailableActions(task) {
        const actions = [];
        const role = this.currentUser.role;
        const status = task.status;
        
        if (role === 'business') {
            if (task.businessUser === this.currentUser.email) {
                actions.push({ id: 'edit', label: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', icon: '‚úèÔ∏è' });
                actions.push({ id: 'addDocument', label: 'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', icon: 'üìé' });
                
                if (status === 'rework') {
                    actions.push({ id: 'returnToWork', label: 'üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É', icon: 'üîÑ' });
                }
            }
        }
        
        if (role === 'manager') {
            if (status === 'created') {
                actions.push({ id: 'assign', label: 'üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å', icon: 'üë•' });
            }
            if (status === 'approval') {
                actions.push({ id: 'approve', label: '‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å', icon: '‚úÖ' });
                actions.push({ id: 'return', label: '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å', icon: '‚Ü©Ô∏è' });
            }
            actions.push({ id: 'edit', label: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', icon: '‚úèÔ∏è' });
            actions.push({ id: 'split', label: '‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å', icon: '‚úÇÔ∏è' });
        }
        
        if (role === 'employee') {
            if (task.assignedTo && task.assignedTo.includes(this.currentUser.email)) {
                if (status === 'assigned') {
                    actions.push({ id: 'accept', label: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', icon: '‚úÖ' });
                }
                if (status === 'in-progress') {
                    actions.push({ id: 'pause', label: '‚è∏Ô∏è –ù–∞ –ø–∞—É–∑—É', icon: '‚è∏Ô∏è' });
                    actions.push({ id: 'rework', label: '‚Ü©Ô∏è –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', icon: '‚Ü©Ô∏è' });
                    actions.push({ id: 'approval', label: 'üì§ –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', icon: 'üì§' });
                }
                if (status === 'paused') {
                    actions.push({ id: 'resume', label: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', icon: '‚ñ∂Ô∏è' });
                }
                actions.push({ id: 'attachFile', label: 'üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª', icon: 'üìé' });
            }
        }
        
        if (role === 'superuser') {
            actions.push({ id: 'edit', label: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', icon: '‚úèÔ∏è' });
            actions.push({ id: 'delete', label: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', icon: 'üóëÔ∏è' });
        }
        
        return actions;
    }
    
    getAllRegions() {
        return this.regions;
    }
    
    getRoleName(role) {
        return this.roles[role] || role;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.AuthManager = AuthManager;