/**
 * –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞
 */

class Storage {
    constructor() {
        this.keys = {
            TASKS: 'cursor_pipeline_tasks',
            USERS: 'cursor_pipeline_users',
            SETTINGS: 'cursor_pipeline_settings',
            SESSION: 'cursor_pipeline_session'
        };
        
        this.init();
    }
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É localStorage
        if (!this.isSupported()) {
            console.warn('localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        this.initDefaultData();
    }
    
    isSupported() {
        try {
            const test = '__localStorage_test__';
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        } catch (e) {
            return false;
        }
    }
    
    initDefaultData() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!this.getSettings()) {
            this.setSettings({
                theme: 'light',
                language: 'ru',
                notifications: true,
                autoSave: true
            });
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        if (!this.getSession()) {
            this.setSession({
                startTime: Date.now(),
                lastActivity: Date.now(),
                sessionId: this.generateId()
            });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (!this.getUsers() || this.getUsers().length === 0) {
            this.loadDemoData();
        }
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    setItem(key, data) {
        try {
            localStorage.setItem(key, JSON.stringify(data));
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
            return false;
        }
    }
    
    getItem(key, defaultValue = null) {
        try {
            const item = localStorage.getItem(key);
            return item ? JSON.parse(item) : defaultValue;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ localStorage:', e);
            return defaultValue;
        }
    }
    
    removeItem(key) {
        try {
            localStorage.removeItem(key);
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ localStorage:', e);
            return false;
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–¥–∞—á
    getTasks() {
        return this.getItem(this.keys.TASKS, []);
    }
    
    setTasks(tasks) {
        return this.setItem(this.keys.TASKS, tasks);
    }
    
    addTask(task) {
        const tasks = this.getTasks();
        const newTask = {
            ...task,
            id: this.generateId(),
            createdAt: Date.now(),
            updatedAt: Date.now()
        };
        tasks.push(newTask);
        this.setTasks(tasks);
        return newTask;
    }
    
    updateTask(taskId, updates) {
        const tasks = this.getTasks();
        const index = tasks.findIndex(task => task.id === taskId);
        if (index !== -1) {
            tasks[index] = {
                ...tasks[index],
                ...updates,
                updatedAt: Date.now()
            };
            this.setTasks(tasks);
            return tasks[index];
        }
        return null;
    }
    
    deleteTask(taskId) {
        const tasks = this.getTasks();
        const filteredTasks = tasks.filter(task => task.id !== taskId);
        this.setTasks(filteredTasks);
        return true;
    }
    
    getTaskById(taskId) {
        const tasks = this.getTasks();
        return tasks.find(task => task.id === taskId);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    getUsers() {
        return this.getItem(this.keys.USERS, []);
    }
    
    setUsers(users) {
        return this.setItem(this.keys.USERS, users);
    }
    
    addUser(user) {
        const users = this.getUsers();
        const newUser = {
            ...user,
            id: this.generateId(),
            createdAt: Date.now(),
            isActive: true
        };
        users.push(newUser);
        this.setUsers(users);
        return newUser;
    }
    
    updateUser(userId, updates) {
        const users = this.getUsers();
        const index = users.findIndex(user => user.id === userId);
        if (index !== -1) {
            users[index] = {
                ...users[index],
                ...updates,
                updatedAt: Date.now()
            };
            this.setUsers(users);
            return users[index];
        }
        return null;
    }
    
    deleteUser(userId) {
        const users = this.getUsers();
        const filteredUsers = users.filter(user => user.id !== userId);
        this.setUsers(filteredUsers);
        return true;
    }
    
    getUserById(userId) {
        const users = this.getUsers();
        return users.find(user => user.id === userId);
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    getSettings() {
        return this.getItem(this.keys.SETTINGS, {});
    }
    
    setSettings(settings) {
        return this.setItem(this.keys.SETTINGS, settings);
    }
    
    updateSetting(key, value) {
        const settings = this.getSettings();
        settings[key] = value;
        this.setSettings(settings);
        return settings;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
    getSession() {
        return this.getItem(this.keys.SESSION, {});
    }
    
    setSession(session) {
        return this.setItem(this.keys.SESSION, session);
    }
    
    updateSession(updates) {
        const session = this.getSession();
        const newSession = {
            ...session,
            ...updates,
            lastActivity: Date.now()
        };
        this.setSession(newSession);
        return newSession;
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    exportData() {
        const data = {
            tasks: this.getTasks(),
            users: this.getUsers(),
            settings: this.getSettings(),
            exportDate: new Date().toISOString(),
            version: '1.0.0'
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `cursor-pipeline-backup-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        return data;
    }
    
    importData(jsonData) {
        try {
            const data = typeof jsonData === 'string' ? JSON.parse(jsonData) : jsonData;
            
            if (data.tasks) this.setTasks(data.tasks);
            if (data.users) this.setUsers(data.users);
            if (data.settings) this.setSettings(data.settings);
            
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', e);
            return false;
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    clearAllData() {
        Object.values(this.keys).forEach(key => {
            this.removeItem(key);
        });
        this.initDefaultData();
        return true;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
    loadDemoData() {
        // –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const demoUsers = [
            {
                name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞',
                role: 'supervisor',
                department: 'IT –æ—Ç–¥–µ–ª',
                email: 'anna.ivanova@company.com',
                avatar: 'üë©‚Äçüíº'
            },
            {
                name: '–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤',
                role: 'executor',
                department: 'IT –æ—Ç–¥–µ–ª',
                email: 'mikhail.petrov@company.com',
                avatar: 'üë®‚Äçüíª'
            },
            {
                name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                role: 'executor',
                department: 'IT –æ—Ç–¥–µ–ª',
                email: 'elena.sidorova@company.com',
                avatar: 'üë©‚Äçüíª'
            },
            {
                name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
                role: 'manager',
                department: 'IT –æ—Ç–¥–µ–ª',
                email: 'dmitry.kozlov@company.com',
                avatar: 'üë®‚Äçüíº'
            },
            {
                name: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
                role: 'executor',
                department: 'HR –æ—Ç–¥–µ–ª',
                email: 'olga.novikova@company.com',
                avatar: 'üë©‚Äçüéì'
            },
            {
                name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤',
                role: 'executor',
                department: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                email: 'sergey.volkov@company.com',
                avatar: 'üë®‚Äçüé®'
            },
            {
                name: '–¢–∞—Ç—å—è–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
                role: 'executor',
                department: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                email: 'tatyana.morozova@company.com',
                avatar: 'üë©‚Äçüé®'
            },
            {
                name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–æ–∫–æ–ª–æ–≤',
                role: 'business',
                department: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                email: 'alexander.sokolov@company.com',
                avatar: 'üë®‚Äçüíº'
            }
        ];
        
        this.setUsers(demoUsers);
        
        // –î–µ–º–æ-–∑–∞–¥–∞—á–∏
        const demoTasks = [
            {
                title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ API',
                description: '–°–æ–∑–¥–∞—Ç—å REST API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                priority: 'high',
                assignee: demoUsers[1].name,
                deadline: this.getDateString(7),
                tags: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'API', 'backend'],
                status: 'in-progress'
            },
            {
                title: '–î–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                description: '–°–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞',
                priority: 'medium',
                assignee: demoUsers[2].name,
                deadline: this.getDateString(5),
                tags: ['–¥–∏–∑–∞–π–Ω', 'frontend', 'UI'],
                status: 'new'
            },
            {
                title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD',
                description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                priority: 'high',
                assignee: demoUsers[0].name,
                deadline: this.getDateString(10),
                tags: ['DevOps', 'CI/CD', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
                status: 'new'
            },
            {
                title: '–†–µ–∫—Ä—É—Ç–∏–Ω–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
                description: '–ü–æ–∏—Å–∫ –∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                priority: 'medium',
                assignee: demoUsers[4].name,
                deadline: this.getDateString(14),
                tags: ['HR', '—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'],
                status: 'in-progress'
            },
            {
                title: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
                description: '–ó–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
                priority: 'medium',
                assignee: demoUsers[5].name,
                deadline: this.getDateString(3),
                tags: ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'SMM', '—Ä–µ–∫–ª–∞–º–∞'],
                status: 'review'
            },
            {
                title: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                priority: 'high',
                assignee: demoUsers[2].name,
                deadline: this.getDateString(-2),
                tags: ['—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'QA', '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'],
                status: 'done'
            },
            {
                title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                description: '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î',
                priority: 'critical',
                assignee: demoUsers[1].name,
                deadline: this.getDateString(1),
                tags: ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–º–∏–≥—Ä–∞—Ü–∏—è', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
                status: 'in-progress'
            },
            {
                title: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API',
                description: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
                priority: 'medium',
                assignee: demoUsers[0].name,
                deadline: this.getDateString(8),
                tags: ['–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 'API', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
                status: 'new'
            },
            {
                title: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                priority: 'low',
                assignee: demoUsers[7].name,
                deadline: this.getDateString(20),
                tags: ['–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã'],
                status: 'new'
            },
            {
                title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π',
                description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π',
                priority: 'high',
                assignee: demoUsers[1].name,
                deadline: this.getDateString(12),
                tags: ['–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–ø–ª–∞—Ç–µ–∂–∏', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
                status: 'new'
            }
        ];
        
        this.setTasks(demoTasks);
        
        console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    getDateString(daysFromNow) {
        const date = new Date();
        date.setDate(date.getDate() + daysFromNow);
        return date.toISOString().split('T')[0];
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStorageStats() {
        let totalSize = 0;
        Object.values(this.keys).forEach(key => {
            const item = localStorage.getItem(key);
            if (item) {
                totalSize += item.length;
            }
        });
        
        return {
            totalSize: totalSize,
            totalSizeKB: Math.round(totalSize / 1024 * 100) / 100,
            itemsCount: Object.keys(this.keys).length,
            tasksCount: this.getTasks().length,
            usersCount: this.getUsers().length
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.storage = new Storage();
